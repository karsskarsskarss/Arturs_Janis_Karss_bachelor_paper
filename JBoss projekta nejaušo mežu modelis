import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# === 1. Ielādē datus ===
issue_0 = pd.read_csv("jboss_issue_0 (1).csv", encoding="utf-8", on_bad_lines="skip")
issue_30 = pd.read_csv("jboss_issue_30.csv", encoding="utf-8", on_bad_lines="skip")
issue_50 = pd.read_csv("jboss_issue_50.csv", encoding="utf-8", on_bad_lines="skip")

iter_0 = pd.read_csv("jboss_iteration_0.csv", encoding="utf-8", on_bad_lines="skip")
iter_30 = pd.read_csv("jboss_iteration_30.csv", encoding="utf-8", on_bad_lines="skip")
iter_50 = pd.read_csv("jboss_iteration_50.csv", encoding="utf-8", on_bad_lines="skip")
iter_80 = pd.read_csv("jboss_iteration_80.csv", encoding="utf-8", on_bad_lines="skip")

# === 2. Funkcija apmācībai un novērtēšanai ===
def train_and_predict(issue_df, iteration_df, target_df, iter_number):
    merged = pd.merge(issue_df, iteration_df, on=["boardid", "sprintid"])
    X = merged.drop(columns=["boardid", "sprintid", "name", "vel_diff"])
    y = merged["vel_diff"]
    X = pd.get_dummies(X, drop_first=True).fillna(0)

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)
    merged["vel_diff_pred"] = model.predict(X)

    actual = target_df.groupby("sprintid").mean(numeric_only=True).reset_index()[["sprintid", "vel_diff"]]
    predicted = merged.groupby("sprintid").mean(numeric_only=True).reset_index()[["sprintid", "vel_diff_pred"]]
    comparison = pd.merge(predicted, actual, on="sprintid")
    comparison["difference"] = comparison["vel_diff"] - comparison["vel_diff_pred"]

    mse = mean_squared_error(comparison["vel_diff"], comparison["vel_diff_pred"])
    r2 = r2_score(comparison["vel_diff"], comparison["vel_diff_pred"])
    
    print(f"\n🌲 Rezultāti {iter_number}. iterācijas prognozei ar Random Forest:")
    print(f"📈 MSE: {mse:.2f}, R²: {r2:.3f}")
    print(comparison.sort_values("difference", ascending=False).head(10))
    return comparison, mse, r2

# === 3. Iterācijas ===
c1, mse1, r2_1 = train_and_predict(issue_0, iter_0, iter_30, "1→2")
c2, mse2, r2_2 = train_and_predict(pd.concat([issue_0, issue_30]), pd.concat([iter_0, iter_30]), iter_50, "2→3")
c3, mse3, r2_3 = train_and_predict(pd.concat([issue_0, issue_30, issue_50]), pd.concat([iter_0, iter_30, iter_50]), iter_80, "3→4")
